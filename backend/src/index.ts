import { Elysia } from "elysia";
import { WsClient } from "./wsclient";
import { get, post } from "./httptool";
import { BOSSinfo, getTime } from "./globalData";
import { UserDataService } from "./userDataService";
import { WSConnectionManager } from "./wsConnectionManager";
import { StartupService } from "./startupService";
import cors from "@elysiajs/cors";
import cron from "@elysiajs/cron";

let NPCtoken = "";
// WebSocket ÂíåÁî®Êà∑ÂêçÁöÑÊò†Â∞Ñ
const wsUserMap = new Map<any, string>();

const getNPCtoken = async () => {
  try {
    const res = (await post("https://boundless.wenzi.games/api/auth/login", {
      username: process.env.NPC_USERNAME,
      password: process.env.NPC_PASSWORD,
    })) as any;
    if (res.error) {
      console.log("Ëé∑ÂèñNPC tokenÂ§±Ë¥•:", res.error);
      return {
        message: res.error,
      };
    }
    NPCtoken = res.token;
    console.log("Ëé∑ÂèñNPC tokenÊàêÂäü");
  } catch (error) {
    console.log("Ëé∑ÂèñNPC tokenÂºÇÂ∏∏:", error);
  }
};

// ÂêØÂä®Êó∂ÂàùÂßãÂåñ
const initializeServer = async () => {
  console.log("üöÄ ÊúçÂä°Âô®ÂêØÂä®‰∏≠...");

  // 1. Ëé∑ÂèñNPC token
  await getNPCtoken();

  // 2. ÊÅ¢Â§çRedis‰∏≠ÁöÑÁî®Êà∑Êï∞ÊçÆ
  await StartupService.recoverUsersFromRedis();

  // 3. Ê∏ÖÁêÜÊó†ÊïàÊï∞ÊçÆÔºàÂèØÈÄâÔºâ
  await StartupService.cleanupInvalidData();

  // 4. ÊòæÁ§∫ÊÅ¢Â§çÁªüËÆ°
  const stats = await StartupService.getRecoveryStats();
  console.log("üìä ÊÅ¢Â§çÁªüËÆ°:");
  console.log(`   - ÊÄªÁî®Êà∑Êï∞: ${stats.totalUsers}`);
  console.log(`   - Âú®Á∫øÁî®Êà∑: ${stats.onlineUsers}`);
  console.log(`   - Á¶ªÁ∫øÁî®Êà∑: ${stats.offlineUsers}`);
  console.log(`   - Ê¥ªË∑ÉËøûÊé•: ${stats.activeConnections}`);
  console.log("‚úÖ ÊúçÂä°Âô®ÂàùÂßãÂåñÂÆåÊàê");
};

// ÂêØÂä®ÊúçÂä°Âô®Âπ∂ÂàùÂßãÂåñ
(async () => {
  try {
    await initializeServer();
    const app = new Elysia({
      websocket: {
        perMessageDeflate: {
          compress: true,
          decompress: true,
        },
      },
    })
      .use(cors())
      .get("/", () => "Hello Elysia")
      .get("/status", async () => {
        const stats = await StartupService.getRecoveryStats();
        const connectionStats = WSConnectionManager.getAllConnectionStats();

        return {
          message: "ÊúçÂä°Âô®ËøêË°åÊ≠£Â∏∏",
          stats: {
            totalUsers: stats.totalUsers,
            onlineUsers: stats.onlineUsers,
            offlineUsers: stats.offlineUsers,
            activeConnections: stats.activeConnections,
          },
          timestamp: new Date().toISOString(),
        };
      })
      .post("/stopbattle", async ({ body }: { body: { username: string; password: string } }) => {
        const userData = await UserDataService.getUserData(body.username);
        if (!userData) {
          return {
            message: "Áî®Êà∑‰∏çÂ≠òÂú®",
          };
        }

        if (userData.password !== body.password) {
          return {
            message: "Áî®Êà∑ÂêçÊàñÂØÜÁ†ÅÈîôËØØ",
          };
        }

        const wsConnection = WSConnectionManager.getConnection(body.username);
        if (wsConnection) {
          await wsConnection.stopBattleFnc();
        }

        return {
          message: "ÂÅúÊ≠¢ÊàòÊñó",
        };
      })
      .post("/login", async ({ body }: { body: { username: string; password: string } }) => {
        if (!body.username || !body.password) {
          return {
            message: "Áî®Êà∑ÂêçÊàñÂØÜÁ†Å‰∏çËÉΩ‰∏∫Á©∫",
          };
        }
        const username = body.username;
        const existingUserData = await UserDataService.getUserData(username);
        const existingConnection = WSConnectionManager.getConnection(username);

        // Â¶ÇÊûúÁî®Êà∑Êï∞ÊçÆÂ≠òÂú®‰∏îÂØÜÁ†ÅÂåπÈÖç
        if (existingUserData && existingUserData.password === body.password) {
          if (existingUserData.status === "online" && existingConnection) {
            return {
              message: "Áî®Êà∑Â∑≤ÁôªÂΩï",
            };
          } else {
            // Áî®Êà∑Á¶ªÁ∫øÔºåÈáçÊñ∞ÁôªÂΩï
            const res = (await post("https://boundless.wenzi.games/api/auth/login", body)) as any;
            if (res.error) {
              return {
                message: res.error,
              };
            }

            // Êõ¥Êñ∞Áî®Êà∑Êï∞ÊçÆ‰∏≠ÁöÑtoken
            existingUserData.token = res.token;
            existingUserData.status = "online";
            await UserDataService.saveUserData(username, existingUserData);

            // ÂàõÂª∫Êñ∞ÁöÑWebSocketËøûÊé•
            const wsClient = new WsClient(username, res.token);
            WSConnectionManager.addConnection(username, wsClient);
            wsClient.connect();

            return {
              message: "Áî®Êà∑Â∑≤ÁôªÂΩï",
            };
          }
        }

        // Êñ∞Áî®Êà∑ÁôªÂΩï
        const res = (await post("https://boundless.wenzi.games/api/auth/login", body)) as any;

        if (res.error) {
          return {
            message: res.error,
          };
        }

        // ‰øùÂ≠òÁî®Êà∑Êï∞ÊçÆÂà∞Redis
        const userData = {
          token: res.token,
          username: body.username,
          password: body.password,
          status: "online",
          battleSteps: [],
          logs: [],
          stopBattle: false,
        };
        await UserDataService.saveUserData(username, userData);

        // ÂàõÂª∫WebSocketËøûÊé•
        const wsClient = new WsClient(username, res.token);
        WSConnectionManager.addConnection(username, wsClient);
        wsClient.connect();

        return {
          message: "ÁôªÂΩïÊàêÂäü",
          token: res.token,
        };
      })
      .ws("/ws", {
        open: (ws) => {
          console.log("ws open", "server");
        },
        message: async (ws, message: any) => {
          const event = message.event;
          const data = message.data;

          // ÂØπÊâÄÊúâÊ∂àÊÅØËøõË°åËÆ°Êï∞
          const username = wsUserMap.get(ws.id);
          if (username) {
            WSConnectionManager.incrementRequestCount(username);
          }

          if (event === "connect") {
            const userData = await UserDataService.getUserData(data.username);
            if (!userData || userData.password !== data.password) {
              ws.close();
              return;
            }
            // ‰øùÂ≠ò WebSocket ÂíåÁî®Êà∑ÂêçÁöÑÊò†Â∞Ñ
            wsUserMap.set(ws.id, data.username);
            // ÂàùÂßãÂåñËøûÊé•ÁªüËÆ°
            WSConnectionManager.initConnectionStats(data.username, userData.username);
            console.log("Áî®Êà∑ËøûÊé•:", data.username);
          } else if (event === "battlelog") {
            const username = wsUserMap.get(ws.id);
            if (username) {
              //console.log("ËØ∑Ê±ÇÊàòÊñóÊó•Âøó:", username);
              const wsConnection = WSConnectionManager.getConnection(username);

              if (wsConnection) {
                const battleSteps = await wsConnection.formatBattleSteps();
                ws.send(JSON.stringify({ event: "battlelog", data: battleSteps }));
                wsConnection.tempBattleSteps = [];
              }
            }
          } else if (event === "log") {
            const username = wsUserMap.get(ws.id);
            if (username) {
              const wsConnection = WSConnectionManager.getConnection(username);
              if (wsConnection) {
                const logs = await wsConnection.formatLogs();
                wsConnection.tempLogs = [];
                ws.send(JSON.stringify({ event: "log", data: logs }));
              }
            }
          }
        },
        close: (ws) => {
          const username = wsUserMap.get(ws);
          if (username) {
            console.log("Áî®Êà∑Êñ≠ÂºÄËøûÊé•:", username);
            wsUserMap.delete(ws); // Ê∏ÖÁêÜÊò†Â∞ÑÂÖ≥Á≥ª
          } else {
            console.log("ws close", "server");
          }
        },
      })

      .use(
        cron({
          name: "refreshBossId",
          pattern: "*/1 * * * * *",
          async run() {
            try {
              const res: any = await get("https://boundless.wenzi.games/api/worldboss/current", {
                Authorization: "Bearer " + NPCtoken,
              });

              if (res.boss != null && res.boss._id != BOSSinfo.worldBossId) {
                BOSSinfo.worldBossId = res.boss._id;
                console.log("Êõ¥Êç¢boss", BOSSinfo.worldBossId);
                const challengeRes: any = await post(
                  `https://boundless.wenzi.games/api/worldboss/${BOSSinfo.worldBossId}/challenge`,
                  {},
                  { Authorization: "Bearer " + NPCtoken }
                );
                if (challengeRes.success) {
                  BOSSinfo.challengeId = challengeRes.challengeId;
                  BOSSinfo.bossName = res.boss.name;
                  console.log("Ëé∑ÂèñchallengeIdÊàêÂäü", BOSSinfo.bossName, BOSSinfo.challengeId);
                } else {
                  return;
                }
              } else {
                return;
              }
              const onlineUserIds = await UserDataService.getOnlineUsers();
              let onlineConnections = 0;

              for (const userId of onlineUserIds) {
                const wsConnection = WSConnectionManager.getConnection(userId);
                if (wsConnection) {
                  await wsConnection.joinBattle();
                  onlineConnections++;
                }
              }

              if (onlineConnections > 0) {
                console.log(`${onlineConnections} ‰∏™Âú®Á∫øÁî®Êà∑Âä†ÂÖ•‰∫ÜÊàòÊñó`);
              } else {
                console.log("Ê≤°ÊúâÊâæÂà∞Âú®Á∫øÁöÑÁî®Êà∑");
              }
            } catch (error) {
              console.log("error");
              console.log(error);
              setTimeout(() => {
                getNPCtoken();
              }, 10000);
            }
          },
        })
      )
      .use(
        cron({
          name: "reconnectWs",
          pattern: "0 * * * * *",
          async run() {
            try {
              console.log("Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÈáçÊñ∞ËøûÊé•ws");
              const allUserIds = await UserDataService.getAllUserIds();
              let reconnectedCount = 0;

              for (const userId of allUserIds) {
                const userData = await UserDataService.getUserData(userId);
                if (!userData || userData.status !== "offline" || userData.stopBattle) {
                  continue;
                }

                const existingConnection = WSConnectionManager.getConnection(userId);
                if (existingConnection) {
                  continue; // Â∑≤ÁªèÊúâËøûÊé•‰∫Ü
                }

                try {
                  const res = (await post("https://boundless.wenzi.games/api/auth/login", {
                    username: userData.username,
                    password: userData.password,
                  })) as any;

                  if (res.error) {
                    console.log(`Áî®Êà∑ ${userData.username} ÈáçÊñ∞ÁôªÂΩïÂ§±Ë¥•:`, res.error);
                    continue;
                  }

                  // Êõ¥Êñ∞Áî®Êà∑Êï∞ÊçÆ
                  userData.token = res.token;
                  userData.status = "online";
                  await UserDataService.saveUserData(userId, userData);
                  await UserDataService.addLog(
                    userId,
                    getTime() + " " + userData.username + "ÈáçÊñ∞ËøûÊé•ws"
                  );

                  // ÂàõÂª∫Êñ∞ÁöÑWebSocketËøûÊé•
                  const wsClient = new WsClient(userId, res.token);
                  WSConnectionManager.addConnection(userId, wsClient);
                  wsClient.connect();

                  reconnectedCount++;
                  await new Promise((resolve) => setTimeout(resolve, 2000));
                } catch (error) {
                  console.log(`Áî®Êà∑ ${userData.username} ÈáçÊñ∞ËøûÊé•ÂºÇÂ∏∏:`, error);
                }
              }

              if (reconnectedCount > 0) {
                console.log(`ÈáçÊñ∞ËøûÊé•‰∫Ü ${reconnectedCount} ‰∏™Á¶ªÁ∫øÁî®Êà∑`);
              }
            } catch (error) {
              console.log("ÈáçËøû‰ªªÂä°ÂºÇÂ∏∏:", error);
            }
          },
        })
      )
      .use(
        cron({
          name: "battleHeartbeat",
          pattern: "*/15 * * * * *",
          async run() {
            try {
              /*
               42["battleHeartbeat",{"challengeId":"worldboss_68b84c0ddc0ddf9e075bc27f_68b54dd0e97bf8d707b0e528_1756908669089","battleType":"worldboss","clientTimestamp":1756908671789,"connectionQuality":"good"}]
               */
              const onlineUserIds = await UserDataService.getOnlineUsers();
              onlineUserIds.forEach((userId) => {
                const wsConnection = WSConnectionManager.getConnection(userId);
                if (wsConnection) {
                  wsConnection.send(
                    `42["battleHeartbeat",{"challengeId":"${
                      BOSSinfo.challengeId
                    }","battleType":"worldboss","clientTimestamp":${new Date().getTime()},"connectionQuality":"good"}]`
                  );
                }
              });
            } catch (error) {
              console.log("ÂøÉË∑≥‰ªªÂä°ÂºÇÂ∏∏:", error);
            }
          },
        })
      )
      .use(
        cron({
          name: "resendBattleStart",
          pattern: "*/30 * * * * *",
          async run() {
            try {
              const onlineUserIds = await UserDataService.getOnlineUsers();
              onlineUserIds.forEach(async (userId) => {
                const wsConnection = WSConnectionManager.getConnection(userId);
                if (wsConnection) {
                  await wsConnection.joinBattle();
                }
              });
            } catch (error) {
              console.log("ÈáçÂèëÊàòÊñó‰ªªÂä°ÂºÇÂ∏∏:", error);
            }
          },
        })
      )

      .listen(3333);

    console.log(`ü¶ä Elysia is running at ${app.server?.hostname}:${app.server?.port}`);
  } catch (error) {
    console.error("‚ùå ÊúçÂä°Âô®ÂêØÂä®Â§±Ë¥•:", error);
    process.exit(1);
  }
})();
